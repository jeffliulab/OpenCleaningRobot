<launch>

  <!--===================== LAUNCH  =============================-->
  <!--===================== MODULES =============================-->

  <!-- USE GAZEBO IN SIM AND USE BRINGUP IN REAL -->
  <!-- THIS FILE IS TO LAUNCH IN REAL -->
  <!--===================== HARDWARE SETUP =============================-->

  <!-- UPDATE: Dec 6 , 2024 NEED TEST! -->

  <!-- 设置机器人型号参数 -->
  <arg name="model" default="burger" doc="model type [burger, waffle, waffle_pi]"/>
  
  <!-- 加载机器人模型到参数服务器 -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />

  <!-- 添加 joint_state_publisher | 用于发布关节状态 -->
  <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher">
    <param name="use_gui" value="false"/>
  </node>



  <!--==================== CONTROL ============================-->
  <!--====================  PANEL ============================-->

  <!-- control_panel (NEW, GUI Version)-->
    <node pkg="control_panel" type="control_panel_gui.py" 
        name="control_panel_gui" output="screen"/>

  
  <!-- robot state publisher, for SLAM and AMCL-->
  <!--
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
        <param name="publish_frequency" type="double" value="50.0" />
    </node>
    -->


  <!--==================== EXPLORE ============================-->
  <!--==================== MODULES ============================-->

  <!-- Use SLAM_controller to control gmapping (SLAM) and open RViz -->
    <node pkg="control_panel" type="SLAM_controller.py" 
    name="SLAM_controller" output="screen" 
    launch-prefix="xterm -e"/>  
    <!--note: "gnome-terminal (slash)-(slash)-" or "xterm -e"-->

  <!-- use move_base controller to control move_base -->
  <node pkg="control_panel" type="move_base_controller.py" 
    name="move_base_controller" output="screen" 
    launch-prefix="xterm -e"/>

  <!-- #7: explore_controller -->
  <!-- 使用 explore_controller.py 脚本控制 Explore_Lite 功能 -->
  <!-- 注意：需要和 #6 move_base_controller、#8 control_panel 一起运行 $(find control_panel)/src/-->
  <node pkg="control_panel" type="explore_controller.py" 
    name="explore_controller" output="screen" 
    launch-prefix="xterm -e"/>


  <!--==================== VOICE CONTROL ============================-->
  <!--==================== MODULES ============================-->

  <!-- voice_vosk -->
  <!-- 启动 voice_vosk 节点，用于语音识别 $(find control_panel)/src/-->
  <node pkg="control_panel" type="voice_vosk.py" 
    name="voice_vosk" output="screen" 
    launch-prefix="xterm -e"/>

  

  <!--==================== ROUTE ANALYZE ============================-->
  <!--==================== MODULES ============================-->

  <!-- AMCL controller (Load Map, TF transformation, analyze where the robot currently stand)-->
  <!-- open map_server, load the map, open RViz show the map and the robot-->
  <!-- NOTE: You must turn off #2 SLAM before open #S1 AMCL -->
    <node pkg="control_panel" type="AMCL_controller.py" 
    name="AMCL_controller" output="screen" 
    launch-prefix="xterm -e"/>


  <!-- NOTE: You must turn off Explore Module before following functions-->

  <!-- Route Plan (do not need continuous control, run once in control panel) -->
  <!-- do no need continuous monitoring, so do not implement here-->

  <!--  Route Show -->
  <node pkg="control_panel" type="controller_route_show.py"
  name="route_show" output="screen"  
  launch-prefix="xterm -e"/>



  <!--==================== CLEANING ============================-->
  <!--==================== MODULES ============================-->

  <!--  Route Follow -->
  <node pkg="control_panel" type="controller_route_follow.py"
  name="route_follow" output="screen"
  launch-prefix="xterm -e"/>





</launch>
