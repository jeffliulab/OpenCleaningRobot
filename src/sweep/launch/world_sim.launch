<!-- 
### 添加世界选择参数
### (default: warehouse)
### 启动书店地图    roslaunch sweep warehouse_sim.launch world:=bookstore
### 启动小房子地图    roslaunch sweep warehouse_sim.launch world:=house
### (unloaded yet, do not use this map now)启动医院地图    roslaunch sweep warehouse_sim.launch world:=hospital
### start turtlebot3_house map
-->

<launch>
    <!-- 设置机器人型号参数 -->
    <arg name="model" default="burger" doc="model type [burger, waffle, waffle_pi]"/>
    
    <!-- 添加世界选择参数 -->
    <arg name="world" default="warehouse" doc="world type [warehouse, bookstore, house]"/>
    
    <!-- 启动 Gazebo 并加载 warehouse -->
    <group if="$(eval arg('world') == 'warehouse')">
        <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="world_name" value="$(find aws_robomaker_small_warehouse_world)/worlds/small_warehouse.world"/>
            <arg name="paused" value="false"/>
            <arg name="use_sim_time" value="true"/>
            <arg name="gui" value="true"/>
            <arg name="headless" value="false"/>
            <arg name="debug" value="false"/>
        </include>
    </group>

    <!-- 启动 Gazebo 并加载 bookstore -->
    <group if="$(eval arg('world') == 'bookstore')">
        <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="world_name" value="$(find aws_robomaker_bookstore_world)/worlds/bookstore.world"/>
            <arg name="paused" value="false"/>
            <arg name="use_sim_time" value="true"/>
            <arg name="gui" value="true"/>
            <arg name="headless" value="false"/>
            <arg name="debug" value="false"/>
        </include>
    </group>

    <!-- 启动 Gazebo 并加载 house -->
    <group if="$(eval arg('world') == 'house')">
        <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="world_name" value="$(find aws_robomaker_small_house_world)/worlds/small_house.world"/>
            <arg name="paused" value="false"/>
            <arg name="use_sim_time" value="true"/>
            <arg name="gui" value="true"/>
            <arg name="headless" value="false"/>
            <arg name="debug" value="false"/>
        </include>
    </group>









    <!--############################################-->




    <!-- 加载 burger 机器人模型到参数服务器 -->
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />




    <!-- 添加 robot_state_publisher | for AMCL and Rviz to show robot model 
    
    Update Nov25: SLAM and AMCL all needs robot_state_publisher, so move it to panel launch file
    
    -->
    <!--
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
        <param name="publish_frequency" type="double" value="50.0" />
    </node>
    -->




    <!-- 添加 joint_state_publisher | for AMCL and TF transformation-->
    <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher">
        <param name="use_gui" value="false"/>
    </node>





    <!-- 在 Gazebo 中生成机器人模型，设置初始位置 -->
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" 
          args="-urdf -model turtlebot3_burger 
                -x 0 -y 0 -z 0 
                -param robot_description" />
</launch>